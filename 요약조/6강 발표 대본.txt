8조 6강 요약 발표 시작하겠습니다.
발표는 프로세스, 프로세스 계층, 프로세스 실행 시간 순으로 진행하겠습니다.

프로세스는 시스템에서 실행 중인 프로그램을 뜻하며, 커널에 등록되고, 관리됩니다.

메모리는 가변 영역과 고정 영역으로 구분되고, 그림처럼 구성되어 있습니다. 
가변 영역은 메모리 동적 할당시와 로컬 변수 선언시 사용됩니다.
고정 영역은 프로그램 데이터와 프로그램 코드 저장 영역으로 구성되어 있습니다.

다음은 명령어입니다.
프로세스에 관한 대표적인 명령어는 ps, top, kill 등이 있고, ps는 특정 정보를 출력하는 옵션, kill은 프로세스를 강제로 종료하는 옵션을 가지고 있습니다.

프로세스는 각각 식별 번호가 부여되어 있으며 이를 PID라고 합니다.
PID는 중복되지 않으며, 생성된 프로세스는 부모 프로세스의 ID인 PPID를 가지고 있습니다.
앞서 보신 UID, PID외에 프로세스의 사용자 정보는  RUID, EUID, SUID로 표현됩니다.
PID와 PPID는 unistd.h 파일에 포함된 getpid()와 getppid() 함수를 이용하여 반환받을 수 있습니다.

프로세스 그룹은 관련된 프로세스를 묶은 것으로 그룹에 전달된 신호는 그룹의 모든 프로세스에게 전달됩니다.
그룹 프로세스에는 리더가 존재하며, 그룹 또한 고유한 ID를 부여받고 이를 PGID라 합니다.

pgid는 unistd.h에 포함된 getpgid와 getpgrd로 반환받을 수 있습니다.
또 setpgid 함수를 이용하여 같은 새션 내의 특정 프로세스를 특정 그룹으로 옮길 수 있습니다.

세션은 작업중인 터미널 단위로 프로세스 그룹을 묶은 것입니다.
세션은 입력을 받는 그룹과 그 외의 그룹으로 나누어지고, 세션 리더 프로세스와 고유의 ID를 가집니다.
세션의 ID는 getsid 함수를 통해 반환받을 수 있고 setsid 함수를 통해 생성할 수 있습니다.

다음은 프로세스 실행시간입니다.

프로세스 실행시간은 시스템 러닝 타임과 유저 러닝 타임으로 이루어져 있습니다.
sys/times.h 파일에 포함되어있는 clock_t times 함수를 통하여 특정 시점부터 경과한 시간값을 반환받을 수 있고,
tms 구조체의 멤버를 호출하여 시간값을 이루고 있는 사용자시간과 시스템파일을 따로 반환받을 수 있고, 자식프로세스를 이루고있는 시간값 또한 반환받을 수 있습니다.

이상 6강 요약 발표를 마치겠습니다.
